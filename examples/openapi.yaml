openapi: 3.0.3
info:
  title: GGE API
  version: 1.0.0
tags:
  - name: ServiceExpertise
    description: Сервис определения места проведения и предмета экспертизы
  - name: User
    description: Работа с пользователями
paths:
  /bxapi/identify/oks:
    get:
      x-bitrix-format: true
      tags:
        - ServiceExpertise
      summary: Получение списка ОКС
      responses:
        '200':
          description: Успешный ответ со списком ОКС
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceExpertiseOks'
  /bxapi/identify/elements:
    get:
      x-bitrix-format: true
      tags:
        - ServiceExpertise
      summary: Получение элементов интерфейса сервиса
      responses:
        '200':
          description: Успешный ответ со списком элементов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceExpertiseElement'
  /bxapi/identify/result/{case}:
    get:
      x-bitrix-format: true
      tags:
        - ServiceExpertise
      summary: Получение результата по кейсу
      parameters:
        - name: case
          in: path
          required: true
          schema:
            type: integer
          description: Идентификатор кейса
      responses:
        '200':
          description: Успешный ответ с результатом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceExpertiseResult'
        '404':
          description: Результат не найден
  /api/user/login/:
    post:
      tags:
        - User
      summary: 'User login'
      description: 'Авторизация пользователя.'
      operationId: loginUser
      requestBody:
        description: 'Обязательные поля'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginFields'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "ОК"
        '403':
          description: 'Login or password incorrect'
        '405':
          description: 'Method Not Allowed'
  /api/user/:
    get:
      tags:
        - User
      summary: 'Get user info'
      description: 'Получить все поля профиля текущего пользователя.'
      operationId: getUserInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTable'
        '401':
          description: Unauthorized
        '404':
          description: 'User not found'
        '405':
          description: 'Method Not Allowed'
  /api/user/logout/:
    get:
      tags:
        - User
      summary: 'User logout'
      description: 'Выход пользователя из системы.'
      operationId: userLogout
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '405':
          description: 'Method Not Allowed'
  /api/user/password-recovery/:
    post:
      tags:
        - User
      summary: 'User password recovery'
      description: 'Обновление пароля у пользователя.'
      operationId: passwordRecovery
      requestBody:
        description: 'Обязательные поля'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryFields'
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
  /api/user/register/:
    post:
      tags:
        - User
      summary: 'User registration'
      description: 'Регистрация пользователя.'
      operationId: userRegistration
      requestBody:
        description: 'Обязательные поля'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EMAIL:
                  type: string
                PASSWORD:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: number
                    example: '111'
        '400':
          description: 'Bad Request'
        '405':
          description: 'Method Not Allowed'
  /api/user/update/:
    post:
      tags:
        - User
      summary: 'User update'
      description: 'Обновление профиля пользователя.'
      operationId: userUpdate
      requestBody:
        description: 'Возможные поля'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTable'
      responses:
        '200':
          description: OK
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '405':
          description: 'Method Not Allowed'
  /api/user/createWithList:
    post:
      tags:
        - User
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 5
              uniqueItems: true
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /api/user/createWithListStrings:
      post:
          tags:
              - User
          summary: Creates list of users with given input array
          description: Creates list of users with given input array
          operationId: createUsersWithListInputStrings
          requestBody:
              content:
                  application/json:
                      schema:
                          type: array
                          maxItems: 1
                          items:
                              type: string
          responses:
              '200':
                  description: Successful operation
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/User'
                      application/xml:
                          schema:
                              $ref: '#/components/schemas/User'
              default:
                  description: successful operation
  /api/user/testDeepValidation:
    post:
      tags:
        - User
      summary: Test deep validation
      operationId: testDeepValidation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeepValidationRequest'
      responses:
        '200':
          description: OK
  /api/user/{userId}/uploadImage:
      post:
          tags:
              - User
          summary: uploads an image
          description: ''
          operationId: uploadFile
          parameters:
              -   name: userId
                  in: path
                  description: ID of user to update
                  required: true
                  schema:
                      type: integer
                      format: int64
              -   name: additionalMetadata
                  in: query
                  description: Additional Metadata
                  required: false
                  schema:
                      type: string
          requestBody:
              content:
                  application/octet-stream:
                      schema:
                          type: string
                          format: binary
          responses:
              '200':
                  description: successful operation
  /api/user/{userId}/uploadImage2:
      post:
          tags:
              - User
          summary: uploads an image2
          description: ''
          operationId: uploadFile2
          parameters:
              -   name: userId
                  in: path
                  description: ID of user to update
                  required: true
                  schema:
                      type: integer
                      format: int64
              -   name: additionalMetadata
                  in: query
                  description: Additional Metadata
                  required: false
                  schema:
                      type: string
          requestBody:
              content:
                  application/octet-stream:
                      schema:
                          $ref: '#/components/schemas/BinaryImage'
          responses:
              '200':
                  description: successful operation
components:
  schemas:
    ServiceExpertiseOks:
      type: object
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: ОКС на территории посольств, консульств и представительств Российской Федерации за рубежом
      required:
        - id
        - text
    ServiceExpertiseElement:
      type: object
      properties:
        text:
          type: string
          example: Объект капитального строительства
        code:
          type: string
          example: menuOks
      required:
        - text
        - code
    ServiceExpertiseResult:
      type: object
      properties:
        organization:
          type: string
          example: ФАУ «Главгосэкспертиза России»
        base:
          type: string
          example: ''
        service:
          type: string
          example: Государственная экспертиза проектной документации и (или) результатов инженерных изысканий
        note:
          type: string
          example: Проверка достоверности определения сметной стоимости проводится, если стоимость превышает 10 млн. руб.
      required:
        - organization
        - base
        - service
        - note
    UserLoginFields:
      type: object
      properties:
        LOGIN:
          type: string
        PASSWORD:
          type: string
    PasswordRecoveryFields:
      type: object
      properties:
        PASSWORD:
          type: string
        NEW_PASSWORD:
          type: string
        CONFIRM_PASSWORD:
          type: string
    UserRegisterFields:
      type: object
      properties:
        EMAIL:
          type: string
        PASSWORD:
          type: string
    UserRegisterResponse:
      type: object
      properties:
        ID:
          type: number
          example: '111'
    UserTable:
      title: 'User model (b_user)'
      required:
        - LOGIN
        - PASSWORD
        - EMAIL
      type: object
      properties:
        ID: { type: integer }
        TIMESTAMP_X: { type: integer, format: int32 }
        LOGIN: { type: string }
        PASSWORD: { type: string }
        CHECKWORD: { type: string }
        ACTIVE: { type: string }
        NAME: { type: string }
        LAST_NAME: { type: string }
        EMAIL: { type: string }
        LAST_LOGIN: { type: string, format: date-time }
        DATE_REGISTER: { type: string, format: date-time }
        LID: { type: string }
        PERSONAL_PROFESSION: { type: string }
        PERSONAL_WWW: { type: string }
        PERSONAL_ICQ: { type: string }
        PERSONAL_GENDER: { type: string }
        PERSONAL_BIRTHDATE: { type: string }
        PERSONAL_PHOTO: { type: integer }
        PERSONAL_PHONE: { type: string }
        PERSONAL_FAX: { type: string }
        PERSONAL_MOBILE: { type: string }
        PERSONAL_PAGER: { type: string }
        PERSONAL_STREET: { type: string }
        PERSONAL_MAILBOX: { type: string }
        PERSONAL_CITY: { type: string }
        PERSONAL_STATE: { type: string }
        PERSONAL_ZIP: { type: string }
        PERSONAL_COUNTRY: { type: string }
        PERSONAL_NOTES: { type: string }
        WORK_COMPANY: { type: string }
        WORK_DEPARTMENT: { type: string }
        WORK_POSITION: { type: string }
        WORK_WWW: { type: string }
        WORK_PHONE: { type: string }
        WORK_FAX: { type: string }
        WORK_PAGER: { type: string }
        WORK_STREET: { type: string }
        WORK_MAILBOX: { type: string }
        WORK_CITY: { type: string }
        WORK_STATE: { type: string }
        WORK_ZIP: { type: string }
        WORK_COUNTRY: { type: string }
        WORK_PROFILE: { type: string }
        WORK_LOGO: { type: integer }
        WORK_NOTES: { type: string }
        ADMIN_NOTES: { type: string }
        STORED_HASH: { type: string }
        XML_ID: { type: string }
        PERSONAL_BIRTHDAY: { type: string, format: date }
        EXTERNAL_AUTH_ID: { type: string }
        CHECKWORD_TIME: { type: string, format: date-time }
        SECOND_NAME: { type: string }
        CONFIRM_CODE: { type: string }
        LOGIN_ATTEMPTS: { type: string }
        LAST_ACTIVITY_DATE: { type: string }
        AUTO_TIME_ZONE: { type: string }
        TIME_ZONE: { type: string }
        TIME_ZONE_OFFSET: { type: integer }
        TITLE: { type: string }
        BX_USER_ID: { type: string }
        LANGUAGE_ID: { type: string }
    User:
      title: 'User schem - nashel'
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      required:
        - id
        - username
    DeepValidationRequest:
      title: 'DeepValidationRequest schem - nashel'
      type: object
      required:
        - user
        - users
      properties:
        user:
          $ref: '#/components/schemas/User'
        users:
          title: 'DeepValidationRequest Users schem - nashel'
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/User'
        testStr:
            type: array
            items:
              type: string
        testNotRequired:
          $ref: '#/components/schemas/User'
    BinaryImage:
        type: string
        format: binary
